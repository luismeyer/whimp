service: whimp
useDotenv: true

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs14.x
  region: eu-central-1
  stage: dev
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:custom.stage}
    EMAIL_GSI: emailGSI
    TOKEN_GSI: tokenGSI
    ADRESS_GSI: adressGSI
    BUCKET_NAME: ${self:service}-${self:custom.stage}-image-bucket
    STAGE: ${self:custom.stage}
  apiGateway:
    binaryMediaTypes:
      - '*/*'

plugins:
  - serverless-jetpack
  - serverless-finch
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}

  jetpack:
    preInclude:
      - "!**"
  serverless-offline:
    useChildProcesses: true
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true
      seed: true
    seed:
      main:
        sources:
          - table: ${self:provider.environment.DYNAMODB_TABLE}
            sources: [./packages/backend/db/seed.json]
  s3:
    port: 4000
    host: localhost
    directory: /tmp
  client:
    bucketName: whimp-frontend
    distributionFolder: packages/frontend/dist
    indexDocument: index.html
    errorDocument: index.html

package:
  individually: true

functions:
  backend:
    handler: packages/backend/dist/index.handler
    events:
      - httpApi:
          path: /graphql
          method: '*'
    package:
      include:
        - 'packages/backend/**'
    jetpack:
      roots:
        - '.'
        - 'packages/backend'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: 
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/*"
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:DeleteObject
        Resource: 
          - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}"

  upload:
    handler: packages/upload-image/dist/index.handler
    events:
      - httpApi:
          path: /upload
          method: '*'
    package:
      include:
        - 'packages/upload-image/**'
    jetpack:
      roots:
        - '.'
        - 'packages/upload-image'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: 
          - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}"

resources:
  Resources:

    FrontendProxyRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties: 
        ApiId: 
          Ref: HttpApi
        RouteKey: ANY /{proxy+}
        Target:
          Fn::Join: 
            - "/"
            - - integrations
              - Ref: FrontendProxyIntegration

    FrontendProxyIntegration:   
      Type: AWS::ApiGatewayV2::Integration
      Properties: 
        ApiId: 
          Ref: HttpApi
        IntegrationMethod: ANY
        IntegrationType: HTTP_PROXY
        IntegrationUri: http://${self:custom.client.bucketName}.s3-website.eu-central-1.amazonaws.com/{proxy}
        PassthroughBehavior: WHEN_NO_MATCH
        PayloadFormatVersion: '1.0'

    S3ImageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}

    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: token
            AttributeType: S
          - AttributeName: street
            AttributeType: S
          - AttributeName: postalCode
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EMAIL_GSI}
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.TOKEN_GSI}
            KeySchema:
              - AttributeName: token
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: ${self:provider.environment.ADRESS_GSI}
            KeySchema:
              - AttributeName: street
                KeyType: HASH
              - AttributeName: postalCode
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        TableName: ${self:provider.environment.DYNAMODB_TABLE}